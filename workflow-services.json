{
  "swagger" : "2.0",
  "info" : {
    "version" : "v1",
    "title" : "Workflow Services - Partial definition",
    "description" : "Partial definition of the Viewpoint Workflow Services"
  },
  "schemes" : [ "http", "https" ],
  "basePath" : "/workflow-services/v1",
  "produces" : [ "application/json" ],
  "paths" : {
    "/{community}/workflow/tasks" : {
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "List workflow tasks using filters",
        "description" : "Post a set of filter parameters to retrieve a collection of matching workflow tasks.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "taskFilter",
          "in" : "body",
          "required" : true,
          "description" : "Object containing details of the new project",
          "schema" : {
            "$ref" : "#/definitions/listTasksFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/listTasksResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/workflow/tasks/filters/submitters" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List submitter filter values",
        "description" : "Retrieve a collection of strings representing the names of submitters that can be used for filtering tasks.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "query",
          "in" : "query",
          "type" : "string",
          "required" : false,
          "description" : "If supplied, only submitter names containing this query value will be returned.",
          "default" : ""
        }, {
          "name" : "page",
          "in" : "query",
          "type" : "string",
          "required" : false,
          "description" : "Page number to return.",
          "default" : ""
        }, {
          "name" : "size",
          "in" : "query",
          "type" : "string",
          "required" : false,
          "description" : "Number of results per page.",
          "default" : ""
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/listSubmittersResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/workflow/tasks/filters/subjects" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List subject filter values",
        "description" : "Retrieve a collection of strings representing the task subjects that can be used for filtering tasks.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "query",
          "in" : "query",
          "type" : "string",
          "required" : false,
          "description" : "If supplied, only subjects containing this query value will be returned.",
          "default" : ""
        }, {
          "name" : "page",
          "in" : "query",
          "type" : "string",
          "required" : false,
          "description" : "Page number to return.",
          "default" : ""
        }, {
          "name" : "size",
          "in" : "query",
          "type" : "string",
          "required" : false,
          "description" : "Number of results per page.",
          "default" : ""
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/listSubjectsResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/resolution/triggers" : {
      "post" : {
        "tags" : [ "Resolution" ],
        "summary" : "Create a new trigger for a workflow",
        "description" : "Creates an association between a workflow definition and a list of resources of a specific type (SUBMITTER, TEMPLATE or FOLDER). A TEMPLATE trigger contains a list of EngageOne template ids. A FOLDER trigger contains a list of folder paths in the EngageOne repository. A SUBMITTER trigger contains a list of principle names, which may represent a User or Group.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "trigger",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/triggerSend"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/newItemSuccessResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Resolution" ],
        "summary" : "Retrieve all triggers for a workflow or for a resource",
        "description" : "Depending on the parameters supplied, returns a collection of triggers for a workflow, a template, a folder or a submitter (user or group)",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "workflowId",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Optional. To retrieve a list of Workflow Triggers for a specific workflow, supply the workflow (definition) id."
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Optional. Used in conjunction with workflowId to only return Workflow Triggers of a specific type (SUBMITTER, TEMPLATE or FOLDER)."
        }, {
          "name" : "templateId",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Optional. To retrieve a list of Workflow Triggers for a specific template, supply the template id."
        }, {
          "name" : "folder",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Optional. To retrieve a list of Workflow Triggers for a specific folder, supply the folder path."
        }, {
          "name" : "submitter",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Optional. To retrieve a list of Workflow Triggers for a specific user or group, supply the principle name."
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/listTriggersResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/resolution/triggers/{id}" : {
      "get" : {
        "tags" : [ "Resolution" ],
        "summary" : "Get a trigger",
        "description" : "Retrieve an existing workflow-resource association trigger by its id. The resource can be a Template, Folder or Submitter (user or group).",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "ID of the trigger to retrieve"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/triggerResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "404" : {
            "description" : "Trigger not found - ID does not exist",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Resolution" ],
        "summary" : "Update a trigger",
        "description" : "Update an existing workflow-resource association trigger. The trigger id is taken from the path, not from the supplied object. The resource can be a Template, Folder or Submitter (user or group).",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "ID of the trigger to retrieve"
        }, {
          "name" : "trigger",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/triggerSend"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/successResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "404" : {
            "description" : "Trigger not found - ID does not exist",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Resolution" ],
        "summary" : "Delete a trigger",
        "description" : "Delete an existing workflow-resource association trigger.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "ID of the trigger to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/successResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "404" : {
            "description" : "Trigger not found - ID does not exist",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/resolution/triggers/all" : {
      "post" : {
        "tags" : [ "Resolution" ],
        "summary" : "Update all triggers for an association",
        "description" : "Perform a bulk operation on workflow triggers. The operations are: UPDATE - to change the associated Id on a trigger, for example, to change the template version id to a new template version id. DELETE - to delete all the workflow triggers for a given associated id (template version id, folder id, submitter id) DUPLICATE - to duplicate all the workflow triggers for a given associated id (template version id, folder id, submitter id) and set a new associated Id on them. For example, to copy all the workflow triggers for a template and associate them with a new template.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "update",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateTriggerSend"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/successResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/resolution/resolve-triggers" : {
      "get" : {
        "tags" : [ "Resolution" ],
        "summary" : "Resolve triggers and start workflow(s)",
        "description" : "Evaluates all trigger conditions for a template/submitter combination and then initiates all workflows for which the conditions are met.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "template",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "ID of the template used to create the submitted document"
        }, {
          "name" : "submitter",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "The principal name of the user who submitted the document"
        }, {
          "name" : "ignorePercentages",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "false",
          "description" : "If 'true', percentages are ignored when evaluating triggers. Default is 'false'."
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/successResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    },
    "/{community}/resolution/variables" : {
      "get" : {
        "tags" : [ "Resolution" ],
        "summary" : "List the variables available for a template",
        "description" : "List the variables used in a specified template. These variables can be used in variable-based triggers.",
        "parameters" : [ {
          "name" : "community",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Name of the community"
        }, {
          "name" : "templateId",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "ID of the template for which to retrieve variables"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "number",
          "description" : "Number of the results page to return - default = 1",
          "default" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "number",
          "description" : "Number of items per page - default = 10",
          "default" : 10
        }, {
          "name" : "query",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Optional query to select a subset of variables to return. Variables will be returned if their name contains the specified string."
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/listVariablesResponse"
            }
          },
          "400" : {
            "description" : "Invalid data in request",
            "schema" : {
              "$ref" : "#/definitions/baseFail"
            }
          },
          "500" : {
            "description" : "Internal error",
            "schema" : {
              "$ref" : "#/definitions/baseError"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "pageMetadata" : {
      "type" : "object",
      "properties" : {
        "pageSize" : {
          "type" : "integer"
        },
        "pageNumber" : {
          "type" : "integer"
        },
        "returnedRecords" : {
          "type" : "integer"
        },
        "totalRecords" : {
          "type" : "integer"
        }
      }
    },
    "baseErrorMessageData" : {
      "type" : "object",
      "properties" : {
        "messages" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "baseError" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "error" ]
        },
        "data" : {
          "$ref" : "#/definitions/baseErrorMessageData"
        }
      }
    },
    "baseFail" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "fail" ]
        },
        "data" : {
          "$ref" : "#/definitions/baseErrorMessageData"
        }
      }
    },
    "successResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        }
      }
    },
    "newItemSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "taskSummary" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique identifier for the task"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the task"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the task"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the task",
          "enum" : [ "pending", "inProgress" ]
        },
        "actionStatus" : {
          "type" : "string",
          "description" : "Indication of what needs to happen next for this task",
          "enum" : [ "awaitingUser", "awaitingGroup", "pending" ]
        },
        "actualOwner" : {
          "type" : "string",
          "description" : "The current owner of the task"
        },
        "externalReferenceName" : {
          "type" : "string",
          "description" : "Name of the entity referenced by this task. For example, the name of an EngageOne work item for a documentReview task."
        },
        "externalReferenceId" : {
          "type" : "string",
          "description" : "Unique identifier for the entity referenced by this task"
        },
        "externalReferenceSubjectName" : {
          "type" : "string",
          "description" : "Name to be displayed for the task's Subject. For a documentReview task this is the name of the template the document was created from. For a designReview task this is the name of the Designer asset being reviewed."
        },
        "externalReferenceSubjectId" : {
          "type" : "string",
          "description" : "Unique identifier for the entity used as the Subject"
        },
        "created" : {
          "type" : "string",
          "description" : "Timestamp for when tht task was created"
        },
        "step" : {
          "type" : "string",
          "description" : "Name of the workflow step that created this task"
        },
        "submitter" : {
          "type" : "string",
          "description" : "Name of the user who triggered the workflow by submitting an item for review"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of workflow task",
          "enum" : [ "documentReview", "designReview" ]
        },
        "uriToGetTaskDetails" : {
          "type" : "string",
          "description" : "Link to the task details"
        }
      }
    },
    "listTasksResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "schema",
              "$ref" : "#/definitions/pageMetadata"
            },
            "tasks" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/taskSummary"
              }
            }
          }
        }
      }
    },
    "listTasksFilter" : {
      "type" : "object",
      "properties" : {
        "searchType" : {
          "type" : "string",
          "description" : "Filter the results based on how tasks are assigned",
          "enum" : [ "all", "user", "unassigned" ],
          "default" : "all"
        },
        "assignedUser" : {
          "type" : "string",
          "description" : "When searchType is 'user' and the requesting user has admin entitlements, assigedUser specifies which user's tasks to return",
          "default" : ""
        },
        "query" : {
          "type" : "string",
          "description" : "Results include tasks whose name or description includes the specified string",
          "default" : ""
        },
        "submitters" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Collection of names of submitters to include in results - default is all if no submitters specified"
        },
        "subjects" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Collection of subjects to include in results - default is all if no subjects specified"
        },
        "types" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Collection of types to include in results - default is all if no types specified"
        },
        "statuses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Collection of statuses to include in results - default is all if no types specified"
        },
        "earliestCreationTime" : {
          "type" : "string",
          "description" : "Include tasks created after this date/time",
          "default" : ""
        },
        "latestCreationTime" : {
          "type" : "string",
          "description" : "Include tasks created before this date/time",
          "default" : ""
        },
        "order" : {
          "type" : "string",
          "description" : "Specifies the order of tthe results. Must be one of [name, submitter, subject, type, step, assignedTo, status, created] optionally appended with ':asc' or ':desc' ",
          "default" : "name:asc"
        },
        "page" : {
          "type" : "integer",
          "description" : "Page number for paged results",
          "default" : 0
        },
        "size" : {
          "type" : "integer",
          "description" : "Number of items per page for paged results",
          "default" : 10
        }
      }
    },
    "listSubmittersResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "schema",
              "$ref" : "#/definitions/pageMetadata"
            },
            "submitters" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "listSubjectsResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "schema",
              "$ref" : "#/definitions/pageMetadata"
            },
            "subjects" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "variableTypesEnum" : {
      "type" : "string",
      "enum" : [ "integer", "number", "string", "date", "time" ]
    },
    "operatorsEnum" : {
      "type" : "string",
      "enum" : [ "equals", "less", "lessOrEquals", "greater", "greaterOrEquls", "between", "contains", "earlier", "earlierOrEquals", "later", "laterOrEquals" ]
    },
    "triggerTypeEnum" : {
      "type" : "string",
      "enum" : [ "SUBMITTER", "FOLDER", "TEMPLATE" ]
    },
    "variable" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the variable"
        },
        "type" : {
          "type" : "schema",
          "$ref" : "#/definitions/variableTypesEnum",
          "description" : "Type of the variable"
        }
      }
    },
    "listVariablesResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "schema",
              "$ref" : "#/definitions/pageMetadata"
            },
            "variables" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/variable"
              }
            }
          }
        }
      }
    },
    "condition" : {
      "properties" : {
        "variableName" : {
          "type" : "string",
          "description" : "Name of the variable used in the template"
        },
        "variableType" : {
          "type" : "schema",
          "$ref" : "#/definitions/variableTypesEnum",
          "description" : "Type of the variable"
        },
        "operator" : {
          "type" : "schema",
          "$ref" : "#/definitions/operatorsEnum",
          "description" : "Operator for the comparison"
        },
        "value1" : {
          "type" : "string",
          "description" : "First (and potentially only) value used by the operator"
        },
        "value2" : {
          "type" : "string",
          "description" : "Second value used by the operator (only applicable to range operators)"
        }
      }
    },
    "principalSend" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the principal"
        }
      }
    },
    "principal" : {
      "allOf" : [ {
        "$ref" : "#/definitions/principalSend"
      }, {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "Display name of the principal"
          }
        }
      } ]
    },
    "triggerBase" : {
      "properties" : {
        "workflowId" : {
          "type" : "string",
          "description" : "ID of the workflow to be triggered"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the trigger - visible to the user to distinguise between triggers"
        },
        "associatedId" : {
          "type" : "string",
          "description" : "ID of the object with which the workflow is associated"
        },
        "type" : {
          "type" : "schema",
          "$ref" : "#/definitions/triggerTypeEnum",
          "description" : "Type of trigger"
        },
        "priority" : {
          "type" : "integer",
          "description" : "Relative priority of this trigger."
        },
        "percentage" : {
          "type" : "string",
          "description" : "Percent of cases workflow will be initiated when trigger matches"
        },
        "conditions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/condition"
          }
        }
      }
    },
    "triggerSend" : {
      "allOf" : [ {
        "$ref" : "#/definitions/triggerBase"
      }, {
        "type" : "object",
        "properties" : {
          "applicablePrincipals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/principalSend"
            }
          }
        }
      } ]
    },
    "trigger" : {
      "allOf" : [ {
        "$ref" : "#/definitions/triggerBase"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the trigger"
          },
          "workflowName" : {
            "type" : "string",
            "description" : "Name of the workflow to be triggered"
          },
          "workflowDescription" : {
            "type" : "string",
            "description" : "Description of the workflow to be triggered"
          },
          "associatedDisplayValue" : {
            "type" : "string",
            "description" : "Display name of the object with which the workflow is associated"
          },
          "applicablePrincipals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/principal"
            }
          },
          "updated" : {
            "type" : "string",
            "description" : "Timestamp of the last update to the trigger"
          },
          "isValid" : {
            "type" : "boolean",
            "description" : "Indicates whether the trigger is valid."
          }
        }
      } ]
    },
    "triggerResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "schema",
          "$ref" : "#/definitions/trigger"
        }
      }
    },
    "listTriggersResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "success" ]
        },
        "data" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "schema",
              "$ref" : "#/definitions/pageMetadata"
            },
            "triggers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/trigger"
              }
            }
          }
        }
      }
    },
    "updateTriggerSend" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string",
          "enum" : [ "UPDATE", "DELETE", "DUPLICATE" ],
          "description" : "Type of action to perform against all matching triggers"
        },
        "triggerType" : {
          "type" : "schema",
          "$ref" : "#/definitions/triggerTypeEnum",
          "description" : "Type of trigger to apply the action to"
        },
        "associatedId" : {
          "type" : "string",
          "description" : "Id of the associated object (template, folder, submitter) whose triggers will be updated."
        },
        "newAssociatedId" : {
          "type" : "string",
          "description" : "Only used when action is UPDATE or DUPLICATE. Specifies the id of the object that the triggers will become associated with."
        }
      }
    }
  }
}